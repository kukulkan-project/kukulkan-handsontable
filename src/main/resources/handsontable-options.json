{
    "$id": "handsontableOptions",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "description": "A Handsontable Options object",
    "properties": {
        "allowEmpty": {
            "type": "boolean",
            "description": "If set to true, Handsontable will accept values that are empty (null, undefined or ''). If set to false, Handsontable will not accept the empty values and mark cell as invalid."
        },
        "allowHtml": {
            "type": "boolean",
            "description": "If set to true, data defined in source of the autocomplete or dropdown cell will be treated as HTML"
        },
        "allowInsertColumn": {
            "type": "boolean",
            "description": "If set to false, there won't be an option to insert new columns in the Context Menu."
        },
        "allowInsertRow": {
            "type": "boolean",
            "description": "If set to false, there won't be an option to insert new rows in the Context Menu"
        },
        "allowInvalid": {
            "type": "boolean",
            "description": "If set to true, Handsontable will accept values that were marked as invalid by the cell validator. It will result with invalid cells being treated as valid (will save the invalid value into the Handsontable data source). If set to false, Handsontable will not accept the invalid values and won't allow the user to close the editor. This option will be particularly useful when used with the Autocomplete's strict mode"
        },
        "allowRemoveColumn": {
            "type": "boolean",
            "description": "If set to false, there won't be an option to remove columns in the Context Menu"
        },
        "allowRemoveRow": {
            "type": "boolean",
            "description": "If set to false, there won't be an option to remove rows in the Context Menu"
        },
        "autoColumnSize": {
            "type": "boolean",
            "description": "Enables or disables the AutoColumnSize plugin. Default value is undefined, which has the same effect as true. Disabling this plugin can increase performance, as no size-related calculations would be done. Column width calculations are divided into sync and async part. Each of those parts has their own advantages and disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous operations don't block the browser UI. To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value. You can also use the useHeaders option to take the column headers width into calculation"
        },
        "autoComplete": {
            "items": {},
            "type": "array",
            "description": ""
        },
        "autoRowSize": {
            "type": "boolean",
            "description": "Enables or disables AutoRowSize plugin. Default value is undefined, which has the same effect as false (disabled). Enabling this plugin can decrease performance, as size-related calculations would be performed. Row height calculations are divided into sync and async stages. Each of these stages has their own advantages and disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous operations don't block the browser UI. To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value"
        },
        "autoWrapCol": {
            "type": "boolean",
            "description": "If true, pressing ENTER or down arrow in the last row will move to the first row in the next column"
        },
        "autoWrapRow": {
            "type": "boolean",
            "description": "If true, pressing TAB or right arrow in the last column will move to first column in next row"
        },
        "cell": {
            "items": {},
            "type": "array",
            "description": "Any constructor or column option may be overwritten for a particular cell (row/column combination), using cell array passed to the Handsontable constructor"
        },
        "checkedTemplate": {
            "type": "string",
            "description": "Data template for 'checkbox' type when checkbox is checked"
        },
        "className": {
            "type": "string",
            "description": "Class name for the Handsontable container element."
        },
        "colHeaders": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "description": "Setting true or false will enable or disable the default column headers (A, B, C). You can also define an array ['One', 'Two', 'Three', ...] or a function to define the headers. If a function is set, then the index of the column is passed as a parameter"
        },
        "colWidths": {
            "type": "integer",
            "description": "Defines column widths in pixels. Accepts number, string (that will be converted to a number), array of numbers (if you want to define column width separately for each column) or a function (if you want to set column width dynamically on each render)"
        },
        "columnHeaderHeight": {
            "type": "integer",
            "description": "Allows setting a custom height of the column headers. You can provide a number or an array of heights, if many column header levels are defined"
        },
        "columnSorting": {
            "type": "boolean",
            "description": "Turns on Column sorting"
        },
        "commentedCellClassName": {
            "type": "string",
            "description": "CSS class name added to the commented cells"
        },
        "comments": {
            "type": "boolean",
            "description": "If true, enables the Comments plugin, which enables an option to apply cell comments through the context menu (configurable with context menu keys commentsAddEdit, commentsRemove)"
        },
        "contextMenu": {
            "type": "boolean",
            "description": "Defines if the right-click context menu should be enabled. Context menu allows to create new row or column at any place in the grid among other features"
        },
        "copyColsLimit": {
            "type": "integer",
            "description": ""
        },
        "copyPaste": {
            "type": "boolean",
            "description": "Disables or enables the copy/paste functionality"
        },
        "copyRowsLimit": {
            "type": "integer",
            "description": ""
        },
        "copyable": {
            "type": "boolean",
            "description": "Makes a cell copyable (pressing CTRL + C on your keyboard moves its value to system clipboard)"
        },
        "correctFormat": {
            "type": "boolean",
            "description": "If true then dates will be automatically formatted to match the desired format"
        },
        "currentColClassName": {
            "type": "string",
            "description": "Class name for all visible columns in the current selection"
        },
        "currentHeaderClassName": {
            "type": "string",
            "description": "Class name for all visible headers in current selection"
        },
        "currentRowClassName": {
            "type": "string",
            "description": "Class name for all visible rows in the current selection"
        },
        "customBorders": {
            "type": "boolean",
            "description": "If true, enables the CustomBorders plugin, which enables an option to apply custom borders through the context menu (configurable with context menu key borders). To initialize Handsontable with predefined custom borders, provide cell coordinates and border styles in a form of an array"
        },
        "dateFormat": {
            "type": "string",
            "description": "Date validation format"
        },
        "debug": {
            "type": "boolean",
            "description": "Setting to true enables the debug mode, currently used to test the correctness of the row and column header fixed positioning on a layer above the master table"
        },
        "defaultDate": {
            "type": "string",
            "description": "Definition of default value which will fill the empty cells"
        },
        "disableVisualSelection": {
            "type": "boolean",
            "description": "Disables visual cells selection"
        },
        "enterBeginsEditing": {
            "type": "boolean",
            "description": "If true, ENTER begins editing mode (like in Google Docs). If false, ENTER moves to next row (like Excel) and adds a new row if necessary. TAB adds new column if necessary"
        },
        "fillHandle": {
            "type": "boolean",
            "description": "Enables the fill handle (drag-down and copy-down) functionality, which shows a small rectangle in bottom right corner of the selected area, that let's you expand values to the adjacent cells"
        },
        "filter": {
            "type": "boolean",
            "description": "If defined as true, when the user types into the input area the Autocomplete's suggestion list is updated to only include those choices starting with what has been typed; if defined as false all suggestions remain shown, with those matching what has been typed marked in bold"
        },
        "filteringCaseSensitive": {
            "type": "boolean",
            "description": "If defined as true, filtering in the Autocomplete Editor will be case-sensitive"
        },
        "fixedRowsTop": {
            "type": "integer",
            "description": "Allows to specify the number of fixed (or frozen) rows at the top of the table"
        },
        "fragmentSelection": {
            "type": "boolean",
            "description": "If set to true, it enables the browser's native selection of a fragment of the text within a single cell, between  adjacent cells or in a whole table. If set to 'cell', it enables the possibility of selecting a fragment of the text within a single cell's body"
        },
        "height": {
            "type": "integer",
            "description": "Height of the grid. Can be a number or a function that returns a number"
        },
        "invalidCellClassName": {
            "type": "string",
            "description": "CSS class name for cells that did not pass validation"
        },
        "language": {
            "type": "string",
            "description": "Language for Handsontable translation"
        },
        "manualColumnFreeze": {
            "type": "boolean",
            "description": "Disables or enables ManualColumnFreeze plugin"
        },
        "manualColumnMove": {
            "type": "boolean",
            "description": "Turns on Manual column move, if set to a boolean or define initial column order (as an array of column indexes)"
        },
        "manualColumnResize": {
            "type": "boolean",
            "description": "Turns on Manual column resize, if set to a boolean or define initial column resized widths (an an array of widths)"
        },
        "manualRowMove": {
            "type": "boolean",
            "description": "Turns on Manual row move, if set to a boolean or define initial row order (as an array of row indexes)"
        },
        "manualRowResize": {
            "type": "boolean",
            "description": "Turns on Manual row resize, if set to a boolean or define initial row resized heights (as an array of heights)"
        },
        "maxCols": {
            "type": "integer",
            "description": "Maximum number of cols. If set to a value lower than the initial col count, the data will be trimmed to the provided value as the number of cols"
        },
        "maxRows": {
            "type": "integer",
            "description": "Maximum number of rows. If set to a value lower than the initial row count, the data will be trimmed to the provided value as the number of rows."
        },
        "minCols": {
            "type": "integer",
            "description": "Minimum number of columns. At least that number of columns will be created during initialization"
        },
        "minRows": {
            "type": "integer",
            "description": "Minimum number of rows. At least that number of rows will be created during initialization"
        },
        "minSpareCols": {
            "type": "integer",
            "description": "When set to 1 (or more), Handsontable will add a new column at the end of grid if there are no more empty columns. (unless the number of rows exceeds the one set in the maxCols property)"
        },
        "minSpareRows": {
            "type": "boolean",
            "description": "When set to 1 (or more), Handsontable will add a new row at the end of grid if there are no more empty rows. (unless the number of rows exceeds the one set in the maxRows property)"
        },
        "noWordWrapClassName": {
            "type": "string",
            "description": "CSS class name added to cells with cell meta wordWrap: false"
        },
        "observeChanges": {
            "type": "boolean",
            "description": "Enables the ObserveChanges plugin switches table into one-way data binding where changes are applied into data source (from outside table) will be automatically reflected in the table"
        },
        "observeDOMVisibility": {
            "type": "boolean",
            "description": "When set to true, the table is re-rendered when it is detected that it was made visible in DOM"
        },
        "pasteMode": {
            "type": "string",
            "description": ""
        },
        "persistentState": {
            "type": "boolean",
            "description": "Turns on saving the state of column sorting, column positions and column sizes in local storage"
        },
        "placeholderCellClassName": {
            "type": "string",
            "description": "CSS class name for cells that have a placeholder in use."
        },
        "preventOverflow": {
            "type": "boolean",
            "description": "Prevents table to overlap outside the parent element. If 'horizontal' option is chosen then table will show a horizontal scrollbar if parent's width is narrower then table's width"
        },
        "readOnly": {
            "type": "boolean",
            "description": "Makes cell read only"
        },
        "readOnlyCellClassName": {
            "type": "string",
            "description": "CSS class name for read-only cells."
        },
        "renderAllRows": {
            "type": "boolean",
            "description": "If typed true then virtual rendering mechanism for handsontable will be disabled"
        },
        "rowHeaderWidth": {
            "type": "integer",
            "description": "Allows setting a custom width of the row headers. You can provide a number or an array of widths, if many row header levels are defined"
        },
        "rowHeaders": {
            "type": "boolean",
            "description": "Setting true or false will enable or disable the default row headers (1, 2, 3). You can also define an array ['One', 'Two', 'Three', ...] or a function to define the headers. If a function is set the index of the row is passed as a parameter"
        },
        "rowHeights": {
            "type": "integer",
            "description": "Defines row heights in pixels. Accepts numbers, strings (that will be converted into a number), array of numbers (if you want to define row height separately for each row) or a function (if you want to set row height dynamically on each render)"
        },
        "search": {
            "type": "boolean",
            "description": "Setting to true enables the Search plugin (see demo)"
        },
        "selectionMode": {
            "enum": [
                "multiple",
                "range",
                "single"
            ],
            "type": "string",
            "description": "Defines how the table selection reacts"
        },
        "skipColumnOnPaste": {
            "type": "boolean",
            "description": "When added to a column property, it skips the column on paste and pastes the data on the next column to the right"
        },
        "sortByRelevance": {
            "type": "boolean",
            "description": "If defined as true, the Autocomplete's suggestion list would be sorted by relevance (the closer to the left the match is, the higher the suggestion)"
        },
        "sortIndicator": {
            "type": "boolean",
            "description": "Set whether to display the current sorting order indicator (a triangle icon in the column header, specifying the sorting order)"
        },
        "source": {
            "items": {},
            "type": "array",
            "description": "Defines data source for Autocomplete or Dropdown cell types"
        },
        "startCols": {
            "type": "integer",
            "description": "Initial number of columns"
        },
        "startRows": {
            "type": "integer",
            "description": "Initial number of rows"
        },
        "stretchH": {
            "type": "string",
            "description": "Defines how the columns react, when the declared table width is different than the calculated sum of all column widths. See more mode. Possible values: 'none' Disable stretching 'last' Stretch only the last column 'all' Stretch all the columns evenly"
        },
        "strict": {
            "type": "boolean",
            "description": "If set to true, the value entered into the cell must match (case-sensitive) the autocomplete source. Otherwise, cell won't pass the validation. When filtering the autocomplete source list, the editor will be working in case-insensitive mode"
        },
        "tableClassName": {
            "type": "string",
            "description": "Class name for all tables inside container element"
        },
        "trimDropdown": {
            "type": "boolean",
            "description": "Makes autocomplete or dropdown width the same as the edited cell width. If false then editor will be scaled according to its content"
        },
        "trimWhitespace": {
            "type": "boolean",
            "description": "Defines whether Handsontable should trim the whitespace at the beginning and the end of the cell contents"
        },
        "type": {
            "enum": [
                "autocomplete",
                "date",
                "dropdown",
                "handsontable",
                "password",
                "select",
                "time",
                "numeric",
                "text",
                "checkbox",
                "none"
            ],
            "description": "Shortcut to define the combination of the cell renderer, editor and validator for the column, cell or whole table"
        },
        "uncheckedTemplate": {
            "type": "string",
            "description": "Data template for 'checkbox' type when checkbox is unchecked"
        },
        "undo": {
            "type": "boolean",
            "description": "If true, undo/redo functionality is enabled"
        },
        "valid": {
            "type": "boolean",
            "description": ""
        },
        "visibleRows": {
            "type": "integer",
            "description": "Control number of choices for the autocomplete (or dropdown) typed cells. After exceeding it, a scrollbar for the dropdown list of choices will appear"
        },
        "width": {
            "type": "integer",
            "description": "Width of the grid. Can be a value or a function that returns a value"
        },
        "wordWrap": {
            "type": "boolean",
            "description": "When set to true, the text of the cell content is wrapped if it does not fit in the fixed column width"
        }
    },
    "type": "object"
}